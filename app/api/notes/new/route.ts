import { NextRequest, NextResponse } from 'next/server';
import databaseService, { EditorContent } from '@/services/DatabaseService';
import { logger } from '@/utils/logger';
import { initializeDatabase } from '@/config/dbInit';
import config, { getConfigErrors } from '@/config/database';

// Initialize database on first request
let isInitialized = false;
let hasDbConfigErrors = false;

/**
 * Ensure the database is initialized
 */
async function ensureDbInitialized() {
  if (isInitialized) {
    return true;
  }
  
  // Check if we have DB configuration errors
  const configErrors = getConfigErrors();
  if (configErrors.length > 0) {
    configErrors.forEach(error => logger.error(error));
    hasDbConfigErrors = true;
    return false;
  }
  
  try {
    await initializeDatabase();
    isInitialized = true;
    return true;
  } catch (error) {
    logger.error('Failed to initialize database', error);
    return false;
  }
}

/**
 * POST /api/notes/new
 * Creates a new empty note with a database-generated UUID
 */
export async function POST(request: NextRequest) {
  try {
    // Try to initialize database
    const dbInitialized = await ensureDbInitialized();
    
    // Check if database is available
    if (!dbInitialized) {
      if (hasDbConfigErrors) {
        logger.error('Cannot create note: database not configured - missing POSTGRES_URL');
      } else {
        logger.error('Cannot create note: database not available');
      }
      
      return NextResponse.json(
        { 
          success: false, 
          message: 'Database connection required to create a new note',
          error: 'Database connection not available'
        }, 
        { status: 500 }
      );
    }
    
    // Create an empty note without an ID (will be generated by DB)
    const note: EditorContent = {
      title: 'Untitled Note',
      content: '',
      userId: 'anonymous', // Use anonymous user for now
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    // Save the note to the database to get DB-generated ID
    const savedNote = await databaseService.saveNote(note);
    
    if (!savedNote || !savedNote.id) {
      throw new Error('Failed to create note with database-generated ID');
    }
    
    logger.info(`Created new note with database-generated ID: ${savedNote.id}`);
    
    // Return the new note ID from the database
    return NextResponse.json({
      success: true,
      message: 'New note created successfully',
      noteId: savedNote.id
    }, { status: 201 });
    
  } catch (error) {
    // Log error
    logger.error('Error creating new note', error);
    
    // Return error response
    return NextResponse.json(
      { 
        success: false, 
        message: 'Failed to create new note',
        error: (error as Error).message
      }, 
      { status: 500 }
    );
  }
}